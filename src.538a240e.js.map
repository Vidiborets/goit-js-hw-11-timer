{"version":3,"sources":["js/task-1.js","index.js"],"names":["daysRef","document","querySelector","hoursRef","minsRef","secsRef","Timer","constructor","selector","targetDate","intervalId","start","updateTime","setInterval","currentTime","Date","now","deltaTime","stop","clearInterval","time","days","pad","Math","floor","hours","mins","secs","textContent","value","String","padStart","newTimer"],"mappings":";;;AAAA,MAAMA,EAAUC,SAASC,cAAc,SACjCC,EAAWF,SAASC,cAAc,wBAClCE,EAAUH,SAASC,cAAc,uBACjCG,EAAUJ,SAASC,cAAc,uBAEvC,MAAMI,EACJC,aAAY,SAAEC,EAAF,WAAYC,EAAZ,WAAwBC,EAAa,OACzCF,KAAAA,SAAWA,EAChB,KAAKC,WAAaA,EAClB,KAAKC,WAAaA,EAGrBC,QACSC,KAAAA,WAAW,GACXF,KAAAA,WAAaG,YAAY,KACtBC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKR,WAAaK,EAC/BF,KAAAA,WAAWK,IACf,KAGPC,OACEC,cAAc,KAAKT,YACdA,KAAAA,WAAa,KACbE,KAAAA,WAAW,GAGlBA,WAAWQ,GACLC,MAAAA,EAAO,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QACnCK,EAAQ,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAC9DM,EAAO,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MACxDO,EAAO,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,MAExDpB,EAAQ4B,eAAiBP,IACzBlB,EAASyB,eAAiBH,IAC1BrB,EAAQwB,eAAiBF,IACzBrB,EAAQuB,eAAiBD,IAGzBL,IAAIO,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAGrC,MAAMC,EAAW,IAAI1B,EAAM,CACzBE,SAAU,WACVC,WAAY,IAAIM,KAAK,KAAM,EAAG,EAAG,EAAG,EAAG,KAGzCiB,EAASrB;;AC/CT,aADA,QAAA,oBACA,QAAA","file":"src.538a240e.js","sourceRoot":"../src","sourcesContent":["const daysRef = document.querySelector('#hour')\nconst hoursRef = document.querySelector('[data-value=\"hours\"]')\nconst minsRef = document.querySelector('[data-value=\"mins\"]')\nconst secsRef = document.querySelector('[data-value=\"secs\"]')\n\nclass Timer{\n  constructor({ selector, targetDate, intervalId = null }) {\n    (this.selector = selector),\n    (this.targetDate = targetDate),\n    (this.intervalId = intervalId)\n  }\n\n  start() {\n      this.updateTime(0)\n      this.intervalId = setInterval(() => {\n        const currentTime = Date.now()\n        const deltaTime = this.targetDate - currentTime;\n        this.updateTime(deltaTime)\n      }, 1000);\n    }\n  \n  stop() {\n    clearInterval(this.intervalId)\n    this.intervalId = null;\n    this.updateTime(0);\n  }\n  \n  updateTime(time){\n  const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n  const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n  daysRef.textContent = `${days}`;\n  hoursRef.textContent = `${hours}`;\n  minsRef.textContent = `${mins}`;\n  secsRef.textContent = `${secs}`\n  }\n  \n  pad(value){\n    return String(value).padStart(2, '0');\n }\n}\nconst newTimer = new Timer({\n  selector: '#timer-1',\n  targetDate: new Date(2022, 0, 1, 0, 0, 0),\n});\n\nnewTimer.start()","import './sass/main.scss';\nimport './js/task-1';\n"]}